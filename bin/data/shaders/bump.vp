
attribute vec3 tangent;
attribute vec3 bitangent;
uniform mat4 ViewMatrix;
uniform vec4 Light;
/*uniform vec3 LightAtten;*/
/*uniform vec3 LightColor;*/
/*varying vec3 vTangent;*/
/*varying vec3 vBitangent;*/
varying vec2 vUV;
varying vec3 vLightDir;
varying vec3 vLight;
varying vec3 vViewDir;
/*varying vec3 vNormal;*/
varying vec3 vVertex;



void main(void)
{  
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	vUV = gl_MultiTexCoord0;
	
	vec3 vTangent = normalize(gl_NormalMatrix * tangent);
	vec3 vBitangent = normalize(gl_NormalMatrix * bitangent);
	vec3 vNormal = normalize(gl_NormalMatrix * gl_Normal);
	/*vBitangent = cross(vTangent, vNormal);*/
	
	vVertex = gl_ModelViewMatrix * gl_Vertex;
	vLight = ViewMatrix * Light;
	/*vec3 world_light = vec4(0.0, 0.0, 0.0, 1.0);*/
	/*vLight = vec4(gl_ModelViewMatrix * vec4(0.0, 0.0, 0.0 , 1.0)).xyz;*/
	/*vec3 lightvertex = vec3(gl_ModelViewMatrix * vec4(vLight, 1.0));*/
	
	mat3 tspace = mat3(vTangent,vBitangent,vNormal);
	vViewDir = -vVertex;
	vViewDir *= tspace;
	vLightDir = vLight - vVertex;
	vLightDir *= tspace;
}

