TODO for backscratch:

Read on forum that ASE files retain lightmaps when submitted into gile[s].
Use b3d(scene)+ase(lights) combo to get into gile[s], from there export to anything that retains lights (3ds)?
Can always grab lights from ase afterwards, if they can't be merged after gile[s]'s render
^ Come to think of it, this will most likely work since gile[s] doesn't modify the mesh afaik.

Checkpoint:  You should now have a proof-of-concept 3d geometry resource pipeline.

Once the pipeline is complete, we'll need to shift the aiScene structure data into the scene graph code.
We may need to combine multiple "imports" to merge separate files.  Might be smart to write a way to save
the static portion of the scenegraph so this merger doesn't need to always happen.
Ensure lightmapping and everything is working.


Checkpoint:  You should now be able to spectate around awesome lighted scenes. 
The original light positions and properties should also be retained in this node
for shadows and other calculations.

^MOD: Light locations and everything will be imported into new FML format, delayed until then.

MOVE ON TO OTHER COMPONENTS:

(maybe) recompile newton if can't fix after looking at sdk code
Read the sample code on the newton wiki to figure the best way to bind newton bodies to mesh-based(entity?) nodes

Checkpoint:  Physics is in.  You can now control a character around a scene with full collision.

half-done:
implement shader support, think of a way to do lighting

(delayed) Implement slerp()

(?)write lua wrapper -- delayed, may use spade or delay scripting, we'll see

(done, streaming is broken right now)implement openal

Write FML format save/load
Write editor state

